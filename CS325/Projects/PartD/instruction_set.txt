Instruction Format:
    00000000       000000000000000000000000
[opcode (8 bits)]    [address (24 bits)]

Instruction | Opcode   | Description
-------------------------------------------------------------------------------
HALT        | 00000000 | End program
-------------------------------------------------------------------------------
STORE A     | 00000001 | Store value from AC at address A
-------------------------------------------------------------------------------
STORE MQ,A  | 00000010 | Store value from MQ at address A
-------------------------------------------------------------------------------
LOAD A      | 00000011 | Load value from address A to AC
-------------------------------------------------------------------------------
LOAD MQ, A  | 00000100 | Load value from address A to MQ
-------------------------------------------------------------------------------
MOVE A,B    | 00000101 | Move value from address A to address B
-------------------------------------------------------------------------------
LOAD MQ     | 00000110 | Move value from MQ to AC
-------------------------------------------------------------------------------
ADD A       | 00000111 | Add value at address A to AC
-------------------------------------------------------------------------------
SUB A       | 00001000 | Subtract value at address A from AC and store result
            |          | in AC 
-------------------------------------------------------------------------------
JUMP A      | 00001001 | Go to instruction stored at address A if AC == 0
-------------------------------------------------------------------------------
JUMP_POS A  | 00001010 | Go to instruction stored at address A if AC > 0
-------------------------------------------------------------------------------
JUMP_NEG A  | 00001011 | Go to instruction stored at address A if AC < 0
-------------------------------------------------------------------------------
MULT A      | 00001100 | Multiply MQ by value at address A; put most
            |          | significant bits in AC; least in MQ
-------------------------------------------------------------------------------
DIV A       | 00001101 | Divide AC by value at address A; put quotient in MQ
            |          | and remainder in AC
-------------------------------------------------------------------------------
LEFT_SHIFT  | 00001110 | Multiply AC by 2
-------------------------------------------------------------------------------
RIGHT_SHIFT | 00001111 | Divide AC by 2
-------------------------------------------------------------------------------
