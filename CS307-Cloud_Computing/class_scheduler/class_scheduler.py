#!/usr/local/bin/python3.8
import datetime

import student


class ClassScheduler(object):
    '''Creates and updates a list of student objects and their class schedule.
    '''
    def __init__(self):
        self.students = {}
        self.next_available_id = 1
    
    def _update_next_available_id(self):
        '''Allows ID numbers to be autogenerated.

        Args: None

        Returns: None
        '''
        self.next_available_id += 1
    
    def _determine_class_seconds(self, student_class):
        '''Calculates the duration (in seconds) of a given class.

        Args:
            student_class (tuple):
                3-tuple containing the days, start time, and end time of a class.
        Returns:
            class_seconds (int): Duration of a class in seconds.
        '''
        weekdays, start_time, end_time = student_class
        number_of_days = len(weekdays)
        start_hour = start_time // 100
        start_minutes = start_time % (start_hour * 100)
        end_hour = end_time // 100
        end_minutes = end_time % (end_hour * 100)
        start_delta = datetime.timedelta(
            hours=start_hour, minutes=start_minutes
        )
        end_delta = datetime.timedelta(
            hours=end_hour, minutes=end_minutes
        )
        timedelta = end_delta - start_delta
        class_seconds = timedelta.seconds * number_of_days
        return class_seconds
    
    def add_student(self, name):
        '''Create a new student object and add it to the current roster of student objects.

        Args:
            name (string): Student's name.
        
        Returns:
            current_id (int): The auto generated ID of the newly added student.
        '''
        current_id = self.next_available_id
        new_student = student.Student(name, current_id)
        self.students[current_id] = new_student
        self._update_next_available_id()
        return current_id
    
    def add_class(self, student_id, days_of_week, start_time, end_time):
        '''Adds a new class to an existing student object.

        Args:
            student_id (int): ID of the student enrolling in the new class.
            days_of_week (string): Non-empty string consisting of at least one
                of these characters: MTWRF.
            start_time (int): Start of class time in 24-hour format.
            end_time (int): End of class time in 24-hour format.
        
        Returns:
            None if and only if the new class was successfully added.
        '''
        if student_id not in self.students:
            raise KeyError('ID not found.')
        student = self.students[student_id]
        success = student.add_class(days_of_week, start_time, end_time)
        if success:
            return None
        raise KeyError('New class conflicts with existing schedule.')

    def total_class_time(self, student_id):
        '''Calculates the total class hours in a given students weekly schedule.

        Args:
            student_id (int): ID of the requested student.
        
        Returns:
            total_class_hours (int): Total weekly class time (in hours).
                Excess minutes are truncated.
        '''
        if student_id not in self.students:
            raise KeyError('ID not found.')
        student = self.students[student_id]
        schedule = student.schedule
        if len(schedule) == 0:
            return 0
        total_class_seconds = 0
        for student_class in schedule:
            class_seconds = self._determine_class_seconds(student_class)
            total_class_seconds += class_seconds
        total_class_hours = total_class_seconds / 60 // 60
        return total_class_hours